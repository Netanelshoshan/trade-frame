Commonly Used AFX Functions

Function Name  Description 
AfxAbort Unconditionally terminates an application; usually called when an unrecoverable error occurs 
AfxBeginThread Creates a new thread and begins executing it 
AfxEndThread Terminates the thread that is currently executing 
AfxMessageBox  Displays a Windows message box 
AfxGetApp Returns a pointer to the application object 
AfxGetAppName Returns the name of the application 
AfxGetMainWnd Returns a pointer to the application's main window 
AfxGetInstanceHandle Returns a handle identifying the current application instance 
AfxRegisterWndClass Registers a custom WNDCLASS for an MFC application 

Destruction:
WM_CLOSE initiated/sent by application
WM_DESTROY sent to window for the window
WM_QUIT for the message loop

InitInstance:  false if need to discontinue, perhaps if only one instance can be running
InitInstance should always pass the m_nCmdShow 

UpdateWindow does a WM_PAINT

Declare characters to be of type TCHAR rather than char. If the _UNICODE symbol is defined, TCHAR evaluates to wchar_t, which is a 16-bit Unicode character. If _UNICODE is not defined, TCHAR becomes plain old char. 


Don't use char* or wchar_t* to declare pointers to TCHAR strings. Instead, use TCHAR* or, better yet, the LPTSTR (pointer to TCHAR string) and LPCTSTR (pointer to const TCHAR string) data types. 


Never assume that a character is only 8 bits wide. To convert a buffer length expressed in bytes to a buffer size in characters, divide the buffer length by sizeof(TCHAR). 


Replace calls to string functions in the C run-time library (for example, strcpy) with the corresponding macros in the Windows header file Tchar.h (for example, _tcscpy). 



// file and line numbers on exit for memory loss
#define new DEBUG_NEW  

An ON_WM_CREATE entry in the window's message map connects WM_CREATE messages to the member function named OnCreate. OnCreate is the ideal place to initialize member variables whose values can only be determined at run time. 

CScrollView

CFrameWnd overrides PostNcDestroy and executes a 

delete this;

 


statement. Therefore, when a frame window is destroyed, the object associated with that window is automatically deleted, too. A frame window is destroyed when the user closes the application. 

It's worth noting that CWnd's own implementation of PostNcDestroy does not delete the associated window object. Therefore, if you derive your own window class directly from CWnd, you also need to override PostNcDestroy in the derived class and execute a delete this statement. Otherwise, the CWnd object will not be properly deleted. 

TRACE (_T ("Mouse hover (x=%d, y=%d)\n"),
        LOWORD (lParam), HIWORD (lParam));




